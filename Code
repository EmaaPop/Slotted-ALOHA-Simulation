import random
import pandas as pd
import matplotlib.pyplot as plt

# Total number of slots
TSLOTS = 100000

# This class represents a node that wants to transmit. It will transmit after a certain number of slots (ttl)
# Each node needs to have a classNode instance with a random ttl

class classNode:
	def __init__(self, ttl):
		self.ttl = ttl # number of slots left until transmission
	def tick(self):
		self.ttl = self.ttl - 1 # Decrease number of slots

## My Code

def main():
    random.seed()

    for window_size in [8, 16, 32, 64, 128]:
        Nlist = []
        selist = []
        print("Window size: {0:2d}".format(window_size))

        for N in range(1, 64):
            snode = [ classNode(random.randrange(0, window_size)) for _ in range(N) ]
            successful_slots = 0
            slot_efficiency = 0

            for slot in range(TSLOTS):
                transmitted_nodes = []

                for i in range(N):
                    if not snode[i].ttl:
                        transmitted_nodes.append(i)
                        snode[i].ttl = random.randrange(0, window_size)
                    else:
                        snode[i].tick()

                if not transmitted_nodes:
                    pass

                if (len(transmitted_nodes) == 1):
                    successful_slots = successful_slots + 1

                if (len(transmitted_nodes) > 2):
                    for j in transmitted_nodes:
                        snode[j].ttl = random.randrange(0, window_size)

            slot_efficiency = (successful_slots/float(TSLOTS))

            print("N = {0:2d}: {1:f}".format(N, slot_efficiency))

            Nlist.append(N)
            selist.append(slot_efficiency)

        plt.plot(Nlist, selist)
        print ("")

    plt.xlabel("# of Nodes")
    plt.ylabel("Slot Efficiency")
    plt.legend(['W = 8', 'W = 16', 'W = 32', 'W = 64', 'W = 128'], loc='upper right')
    plt.axis([0, 64, 0, 0.5])
    plt.title('Slotted ALOHA Efficiency')
    plt.grid(linestyle='--')
    plt.show()

    return


if __name__ == "__main__":
    main()
